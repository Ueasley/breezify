/**
 * List of dangerous class names that should not be used in the code.
 */
const dangerousClassNames = [
  "click",
  "change",
  "mouseover",
  "mouseout",
  "mousemove",
  "keydown",
  "keyup",
  "submit",
  "load",
  "error",
  "scroll",
  "focus",
  "blur",
  "string",
  "number",
  "boolean",
  "object",
  "undefined",
  "symbol",
  "function",
  "array",
  "date",
  "promise",
  "null",
  "nan",
  "infinity",
  "event",
  "listener",
  "handler",
  "element",
  "node",
  "component",
  "module",
  "export",
  "import",
  "console",
  "window",
  "document",
  "navigator",
  "screen",
  "location",
  "history",
  "storage",
  "cache",
  "cookie",
  "session",
  "global",
  "local",
  "state",
  "action",
  "context",
  "provider",
  "consumer",
  "reducer",
  "dispatch",
  "middleware",
  "hook",
  "effect",
  "ref",
  "memo",
  "callback",
  "async",
  "await",
  "promise",
  "generator",
  "yield",
  "stream",
  "buffer",
  "blob",
  "file",
  "formData",
  "request",
  "response",
  "header",
  "body",
  "method",
  "get",
  "post",
  "put",
  "delete",
  "patch",
  "query",
  "param",
  "route",
  "router",
  "link",
  "navigation",
  "redirect",
  "path",
  "url",
  "uri",
  "domain",
  "protocol",
  "ssl",
  "tls",
  "certificate",
  "auth",
  "login",
  "logout",
  "session",
  "token",
  "jwt",
  "oauth",
  "encryption",
  "hash",
  "salt",
  "algorithm",
  "cipher",
  "decipher",
  "signature",
  "key",
  "public",
  "private",
  "permission",
  "role",
  "user",
  "profile",
  "account",
  "data",
  "model",
  "view",
  "controller",
  "mvc",
  "mvvm",
  "framework",
  "library",
  "api",
  "interface",
  "abstract",
  "class",
  "object",
  "type",
  "enum",
  "interface",
  "instance",
  "constructor",
  "destructor",
  "method",
  "function",
  "variable",
  "constant",
  "static",
  "dynamic",
  "volatile",
  "synchronized",
  "lock",
  "thread",
  "process",
  "execute",
  "run",
  "debug",
  "test",
  "benchmark",
  "compile",
  "build",
  "deploy",
  "release",
  "version",
  "patch",
  "feature",
  "bug",
  "fix",
  "issue",
  "error",
  "exception",
  "try",
  "catch",
  "finally",
  "throw",
  "assert",
  "log",
  "warn",
  "error",
  "info",
  "trace",
  "debug",
  "performance",
  "optimization",
  "scale",
  "load",
  "stress",
  "capacity",
  "benchmark",
  "test",
  "validation",
  "sanitize",
  "security",
  "vulnerability",
  "exploit",
  "patch",
  "update",
  "upgrade",
  "backward",
  "compatibility",
  "deprecation",
  "obsolete",
  "legacy",
  "migration",
  "transition",
  "transform",
];

/**
 * Check if a class name is dangerous.
 * @param className {string} - Class name
 * @returns {boolean} - True if the class name is dangerous
 */
export function isDangerousClassName(className: string): boolean {
  return dangerousClassNames.includes(className);
}
